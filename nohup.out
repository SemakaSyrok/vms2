Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "users" ("id"   SERIAL , "login" VARCHAR(255) NOT NULL UNIQUE, "name" VARCHAR(255) NOT NULL UNIQUE, "pass" VARCHAR(255) NOT NULL, "token" VARCHAR(255) UNIQUE, "is_admin" INTEGER, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Connection has been established successfully.
listening on 3001
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "cameras" ("id"   SERIAL , "connection_string" VARCHAR(255) NOT NULL, "name" VARCHAR(255) NOT NULL UNIQUE, "owner_id" INTEGER NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'cameras' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "coasts" ("id"   SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "coast" INTEGER NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'coasts' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "questions" ("id"   SERIAL , "question" VARCHAR(255) NOT NULL UNIQUE, "unswer" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'questions' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "benefits" ("id"   SERIAL , "question" VARCHAR(255) NOT NULL UNIQUE, "unswer" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'benefits' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "Messages" ("id"   SERIAL , "text" VARCHAR(255) NOT NULL, "user_id" INTEGER NOT NULL, "room" INTEGER NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Messages' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "works" ("id"   SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "desc" TEXT NOT NULL, "shir" DOUBLE PRECISION NOT NULL, "dolg" DOUBLE PRECISION NOT NULL, "images" VARCHAR(255)[], "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'works' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "news" ("id"   SERIAL , "news" VARCHAR(255) NOT NULL UNIQUE, "description" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'news' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "bonuses" ("id"   SERIAL , "bonuses" VARCHAR(255) NOT NULL UNIQUE, "unswer" VARCHAR(255) NOT NULL UNIQUE, "link" VARCHAR(255) NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'bonuses' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT "id", "login", "name", "pass", "is_admin" FROM "users" AS "users" WHERE "users"."token" = 'Bearer1565889478887';
Executing (default): SELECT "id", "login", "name", "pass", "is_admin" FROM "users" AS "users" WHERE "users"."token" = 'Bearer1565889478887';
user connected
user connected
user disconnected
user disconnected
Executing (default): SELECT "id", "login", "name", "pass", "is_admin" FROM "users" AS "users" WHERE "users"."token" = 'Bearer1565889478887';
user connected
Executing (default): SELECT "id", "login", "name", "pass", "is_admin" FROM "users" AS "users" WHERE "users"."token" = 'Bearer1565889478887';
user connected
Executing (default): SELECT "id", "room", "user_id", "createdAt", "text" FROM "Messages" AS "Message" WHERE "Message"."room" = '2' ORDER BY "Message"."id" DESC LIMIT 20 OFFSET '0';
[ Message {
    dataValues:
     { id: 16,
       room: 2,
       user_id: 2,
       createdAt: 2019-08-15T17:11:32.753Z,
       text: 'норм' },
    _previousDataValues:
     { id: 16,
       room: 2,
       user_id: 2,
       createdAt: 2019-08-15T17:11:32.753Z,
       text: 'норм' },
    _changed: {},
    _modelOptions:
     { timestamps: true,
       validate: {},
       freezeTableName: false,
       underscored: false,
       paranoid: false,
       rejectOnEmpty: false,
       whereCollection: [Object],
       schema: null,
       schemaDelimiter: '',
       defaultScope: {},
       scopes: {},
       indexes: [],
       name: [Object],
       omitNull: false,
       sequelize: [Sequelize],
       hooks: {} },
    _options:
     { isNewRecord: false,
       _schema: null,
       _schemaDelimiter: '',
       raw: true,
       attributes: [Array] },
    isNewRecord: false },
  Message {
    dataValues:
     { id: 15,
       room: 2,
       user_id: 1,
       createdAt: 2019-08-15T15:59:24.620Z,
       text: 'вроде' },
    _previousDataValues:
     { id: 15,
       room: 2,
       user_id: 1,
       createdAt: 2019-08-15T15:59:24.620Z,
       text: 'вроде' },
    _changed: {},
    _modelOptions:
     { timestamps: true,
       validate: {},
       freezeTableName: false,
       underscored: false,
       paranoid: false,
       rejectOnEmpty: false,
       whereCollection: [Object],
       schema: null,
       schemaDelimiter: '',
       defaultScope: {},
       scopes: {},
       indexes: [],
       name: [Object],
       omitNull: false,
       sequelize: [Sequelize],
       hooks: {} },
    _options:
     { isNewRecord: false,
       _schema: null,
       _schemaDelimiter: '',
       raw: true,
       attributes: [Array] },
    isNewRecord: false },
  Message {
    dataValues:
     { id: 14,
       room: 2,
       user_id: 2,
       createdAt: 2019-08-15T15:58:17.664Z,
       text: 'Пашет?' },
    _previousDataValues:
     { id: 14,
       room: 2,
       user_id: 2,
       createdAt: 2019-08-15T15:58:17.664Z,
       text: 'Пашет?' },
    _changed: {},
    _modelOptions:
     { timestamps: true,
       validate: {},
       freezeTableName: false,
       underscored: false,
       paranoid: false,
       rejectOnEmpty: false,
       whereCollection: [Object],
       schema: null,
       schemaDelimiter: '',
       defaultScope: {},
       scopes: {},
       indexes: [],
       name: [Object],
       omitNull: false,
       sequelize: [Sequelize],
       hooks: {} },
    _options:
     { isNewRecord: false,
       _schema: null,
       _schemaDelimiter: '',
       raw: true,
       attributes: [Array] },
    isNewRecord: false },
  Message {
    dataValues:
     { id: 13,
       room: 2,
       user_id: 1,
       createdAt: 2019-08-15T14:45:39.434Z,
       text: 'Норм' },
    _previousDataValues:
     { id: 13,
       room: 2,
       user_id: 1,
       createdAt: 2019-08-15T14:45:39.434Z,
       text: 'Норм' },
    _changed: {},
    _modelOptions:
     { timestamps: true,
       validate: {},
       freezeTableName: false,
       underscored: false,
       paranoid: false,
       rejectOnEmpty: false,
       whereCollection: [Object],
       schema: null,
       schemaDelimiter: '',
       defaultScope: {},
       scopes: {},
       indexes: [],
       name: [Object],
       omitNull: false,
       sequelize: [Sequelize],
       hooks: {} },
    _options:
     { isNewRecord: false,
       _schema: null,
       _schemaDelimiter: '',
       raw: true,
       attributes: [Array] },
    isNewRecord: false },
  Message {
    dataValues:
     { id: 12,
       room: 2,
       user_id: 1,
       createdAt: 2019-08-15T14:45:30.867Z,
       text: 'qwe' },
    _previousDataValues:
     { id: 12,
       room: 2,
       user_id: 1,
       createdAt: 2019-08-15T14:45:30.867Z,
       text: 'qwe' },
    _changed: {},
    _modelOptions:
     { timestamps: true,
       validate: {},
       freezeTableName: false,
       underscored: false,
       paranoid: false,
       rejectOnEmpty: false,
       whereCollection: [Object],
       schema: null,
       schemaDelimiter: '',
       defaultScope: {},
       scopes: {},
       indexes: [],
       name: [Object],
       omitNull: false,
       sequelize: [Sequelize],
       hooks: {} },
    _options:
     { isNewRecord: false,
       _schema: null,
       _schemaDelimiter: '',
       raw: true,
       attributes: [Array] },
    isNewRecord: false },
  Message {
    dataValues:
     { id: 11,
       room: 2,
       user_id: 1,
       createdAt: 2019-08-15T14:41:36.114Z,
       text: 'qweqwe' },
    _previousDataValues:
     { id: 11,
       room: 2,
       user_id: 1,
       createdAt: 2019-08-15T14:41:36.114Z,
       text: 'qweqwe' },
    _changed: {},
    _modelOptions:
     { timestamps: true,
       validate: {},
       freezeTableName: false,
       underscored: false,
       paranoid: false,
       rejectOnEmpty: false,
       whereCollection: [Object],
       schema: null,
       schemaDelimiter: '',
       defaultScope: {},
       scopes: {},
       indexes: [],
       name: [Object],
       omitNull: false,
       sequelize: [Sequelize],
       hooks: {} },
    _options:
     { isNewRecord: false,
       _schema: null,
       _schemaDelimiter: '',
       raw: true,
       attributes: [Array] },
    isNewRecord: false },
  Message {
    dataValues:
     { id: 10,
       room: 2,
       user_id: 1,
       createdAt: 2019-08-15T12:54:43.947Z,
       text: 'wer' },
    _previousDataValues:
     { id: 10,
       room: 2,
       user_id: 1,
       createdAt: 2019-08-15T12:54:43.947Z,
       text: 'wer' },
    _changed: {},
    _modelOptions:
     { timestamps: true,
       validate: {},
       freezeTableName: false,
       underscored: false,
       paranoid: false,
       rejectOnEmpty: false,
       whereCollection: [Object],
       schema: null,
       schemaDelimiter: '',
       defaultScope: {},
       scopes: {},
       indexes: [],
       name: [Object],
       omitNull: false,
       sequelize: [Sequelize],
       hooks: {} },
    _options:
     { isNewRecord: false,
       _schema: null,
       _schemaDelimiter: '',
       raw: true,
       attributes: [Array] },
    isNewRecord: false },
  Message {
    dataValues:
     { id: 9,
       room: 2,
       user_id: 2,
       createdAt: 2019-08-15T12:54:26.772Z,
       text: 'wer' },
    _previousDataValues:
     { id: 9,
       room: 2,
       user_id: 2,
       createdAt: 2019-08-15T12:54:26.772Z,
       text: 'wer' },
    _changed: {},
    _modelOptions:
     { timestamps: true,
       validate: {},
       freezeTableName: false,
       underscored: false,
       paranoid: false,
       rejectOnEmpty: false,
       whereCollection: [Object],
       schema: null,
       schemaDelimiter: '',
       defaultScope: {},
       scopes: {},
       indexes: [],
       name: [Object],
       omitNull: false,
       sequelize: [Sequelize],
       hooks: {} },
    _options:
     { isNewRecord: false,
       _schema: null,
       _schemaDelimiter: '',
       raw: true,
       attributes: [Array] },
    isNewRecord: false },
  Message {
    dataValues:
     { id: 8,
       room: 2,
       user_id: 2,
       createdAt: 2019-08-15T12:53:22.558Z,
       text: 'qwe' },
    _previousDataValues:
     { id: 8,
       room: 2,
       user_id: 2,
       createdAt: 2019-08-15T12:53:22.558Z,
       text: 'qwe' },
    _changed: {},
    _modelOptions:
     { timestamps: true,
       validate: {},
       freezeTableName: false,
       underscored: false,
       paranoid: false,
       rejectOnEmpty: false,
       whereCollection: [Object],
       schema: null,
       schemaDelimiter: '',
       defaultScope: {},
       scopes: {},
       indexes: [],
       name: [Object],
       omitNull: false,
       sequelize: [Sequelize],
       hooks: {} },
    _options:
     { isNewRecord: false,
       _schema: null,
       _schemaDelimiter: '',
       raw: true,
       attributes: [Array] },
    isNewRecord: false },
  Message {
    dataValues:
     { id: 7,
       room: 2,
       user_id: 2,
       createdAt: 2019-08-15T12:51:11.523Z,
       text: 'цу' },
    _previousDataValues:
     { id: 7,
       room: 2,
       user_id: 2,
       createdAt: 2019-08-15T12:51:11.523Z,
       text: 'цу' },
    _changed: {},
    _modelOptions:
     { timestamps: true,
       validate: {},
       freezeTableName: false,
       underscored: false,
       paranoid: false,
       rejectOnEmpty: false,
       whereCollection: [Object],
       schema: null,
       schemaDelimiter: '',
       defaultScope: {},
       scopes: {},
       indexes: [],
       name: [Object],
       omitNull: false,
       sequelize: [Sequelize],
       hooks: {} },
    _options:
     { isNewRecord: false,
       _schema: null,
       _schemaDelimiter: '',
       raw: true,
       attributes: [Array] },
    isNewRecord: false },
  Message {
    dataValues:
     { id: 6,
       room: 2,
       user_id: 1,
       createdAt: 2019-08-15T12:50:44.544Z,
       text: 'фыв' },
    _previousDataValues:
     { id: 6,
       room: 2,
       user_id: 1,
       createdAt: 2019-08-15T12:50:44.544Z,
       text: 'фыв' },
    _changed: {},
    _modelOptions:
     { timestamps: true,
       validate: {},
       freezeTableName: false,
       underscored: false,
       paranoid: false,
       rejectOnEmpty: false,
       whereCollection: [Object],
       schema: null,
       schemaDelimiter: '',
       defaultScope: {},
       scopes: {},
       indexes: [],
       name: [Object],
       omitNull: false,
       sequelize: [Sequelize],
       hooks: {} },
    _options:
     { isNewRecord: false,
       _schema: null,
       _schemaDelimiter: '',
       raw: true,
       attributes: [Array] },
    isNewRecord: false },
  Message {
    dataValues:
     { id: 5,
       room: 2,
       user_id: 2,
       createdAt: 2019-08-15T12:48:59.277Z,
       text: 'Ага' },
    _previousDataValues:
     { id: 5,
       room: 2,
       user_id: 2,
       createdAt: 2019-08-15T12:48:59.277Z,
       text: 'Ага' },
    _changed: {},
    _modelOptions:
     { timestamps: true,
       validate: {},
       freezeTableName: false,
       underscored: false,
       paranoid: false,
       rejectOnEmpty: false,
       whereCollection: [Object],
       schema: null,
       schemaDelimiter: '',
       defaultScope: {},
       scopes: {},
       indexes: [],
       name: [Object],
       omitNull: false,
       sequelize: [Sequelize],
       hooks: {} },
    _options:
     { isNewRecord: false,
       _schema: null,
       _schemaDelimiter: '',
       raw: true,
       attributes: [Array] },
    isNewRecord: false },
  Message {
    dataValues:
     { id: 4,
       room: 2,
       user_id: 1,
       createdAt: 2019-08-15T12:47:14.332Z,
       text: 'Это хорошо' },
    _previousDataValues:
     { id: 4,
       room: 2,
       user_id: 1,
       createdAt: 2019-08-15T12:47:14.332Z,
       text: 'Это хорошо' },
    _changed: {},
    _modelOptions:
     { timestamps: true,
       validate: {},
       freezeTableName: false,
       underscored: false,
       paranoid: false,
       rejectOnEmpty: false,
       whereCollection: [Object],
       schema: null,
       schemaDelimiter: '',
       defaultScope: {},
       scopes: {},
       indexes: [],
       name: [Object],
       omitNull: false,
       sequelize: [Sequelize],
       hooks: {} },
    _options:
     { isNewRecord: false,
       _schema: null,
       _schemaDelimiter: '',
       raw: true,
       attributes: [Array] },
    isNewRecord: false },
  Message {
    dataValues:
     { id: 3,
       room: 2,
       user_id: 1,
       createdAt: 2019-08-15T12:46:55.623Z,
       text: 'Норм' },
    _previousDataValues:
     { id: 3,
       room: 2,
       user_id: 1,
       createdAt: 2019-08-15T12:46:55.623Z,
       text: 'Норм' },
    _changed: {},
    _modelOptions:
     { timestamps: true,
       validate: {},
       freezeTableName: false,
       underscored: false,
       paranoid: false,
       rejectOnEmpty: false,
       whereCollection: [Object],
       schema: null,
       schemaDelimiter: '',
       defaultScope: {},
       scopes: {},
       indexes: [],
       name: [Object],
       omitNull: false,
       sequelize: [Sequelize],
       hooks: {} },
    _options:
     { isNewRecord: false,
       _schema: null,
       _schemaDelimiter: '',
       raw: true,
       attributes: [Array] },
    isNewRecord: false },
  Message {
    dataValues:
     { id: 2,
       room: 2,
       user_id: 2,
       createdAt: 2019-08-15T12:46:27.130Z,
       text: 'Как дела' },
    _previousDataValues:
     { id: 2,
       room: 2,
       user_id: 2,
       createdAt: 2019-08-15T12:46:27.130Z,
       text: 'Как дела' },
    _changed: {},
    _modelOptions:
     { timestamps: true,
       validate: {},
       freezeTableName: false,
       underscored: false,
       paranoid: false,
       rejectOnEmpty: false,
       whereCollection: [Object],
       schema: null,
       schemaDelimiter: '',
       defaultScope: {},
       scopes: {},
       indexes: [],
       name: [Object],
       omitNull: false,
       sequelize: [Sequelize],
       hooks: {} },
    _options:
     { isNewRecord: false,
       _schema: null,
       _schemaDelimiter: '',
       raw: true,
       attributes: [Array] },
    isNewRecord: false },
  Message {
    dataValues:
     { id: 1,
       room: 2,
       user_id: 2,
       createdAt: 2019-08-15T12:45:54.743Z,
       text: 'Привет' },
    _previousDataValues:
     { id: 1,
       room: 2,
       user_id: 2,
       createdAt: 2019-08-15T12:45:54.743Z,
       text: 'Привет' },
    _changed: {},
    _modelOptions:
     { timestamps: true,
       validate: {},
       freezeTableName: false,
       underscored: false,
       paranoid: false,
       rejectOnEmpty: false,
       whereCollection: [Object],
       schema: null,
       schemaDelimiter: '',
       defaultScope: {},
       scopes: {},
       indexes: [],
       name: [Object],
       omitNull: false,
       sequelize: [Sequelize],
       hooks: {} },
    _options:
     { isNewRecord: false,
       _schema: null,
       _schemaDelimiter: '',
       raw: true,
       attributes: [Array] },
    isNewRecord: false } ]
